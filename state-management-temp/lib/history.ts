import invariant from "tiny-invariant";
import { TickKind } from "./cases/index";

const etfPrices = [
	39.04556656, 40.56109619, 40.72795486, 42.65797806, 42.19408035,
	42.32662201, 41.52931213, 43.44632339, 43.22200775, 44.85276794,
	44.95143509, 45.68780899, 46.31180191, 44.81889725, 44.68447113,
	44.82493973, 45.85530853, 46.70093918, 48.54699326, 49.67788696, 50.0203743,
	51.21064377, 50.37877274, 50.72657013, 52.99245071, 54.96580887,
	53.79186249, 52.08829117, 52.85460663, 54.65477371, 55.87154388,
	53.34496689, 52.69155121, 49.70806122, 48.46719742, 47.8102684, 50.38025665,
	51.3959465, 46.99956512, 46.92744827, 47.61267471, 43.00024796, 35.66015244,
	32.80200195, 33.12779999, 30.69529533, 27.46460152, 29.53136826,
	33.00469971, 34.80781937, 34.76273346, 37.63873291, 39.03556061,
	40.46257782, 39.57957458, 41.83239365, 42.75775909, 41.49573517,
	42.92322159, 45.48806, 46.6647644, 42.98614502, 40.28084946, 43.31715775,
	41.27644348, 44.94972992, 47.00177765, 47.24172592, 50.26063156,
	51.56451035, 53.47112656, 53.47112656, 55.25004959, 54.66394043, 53.4526825,
	52.46378708, 49.26966095, 45.29856873, 50.71453857, 50.52519989,
	50.73032379, 53.60552979, 55.86685944, 57.33474731, 57.21414948,
	53.65218353, 55.54074478, 56.31104279, 57.83274078, 58.98602295,
	58.20318222, 58.65388107, 58.97580719, 62.63086319, 63.43353271,
	65.63877106, 66.99699402, 68.63404083, 67.3309021, 71.53479767, 69.36636353,
	71.72303772, 75.14485931, 77.17576599, 78.86960602, 76.7726059, 80.50872803,
	80.56659698, 80.96859741, 82.6705246, 84.48861694, 83.14523315, 86.59642029,
	84.39563751, 87.10884857, 89.26938629, 88.76695251, 86.79387665,
	91.77755737, 90.2875061, 91.26850891, 92.45259857, 90.51574707, 92.45005798,
	86.81846619, 83.85401917, 90.9484787, 91.49488831, 89.04463959, 84.42618561,
	84.41757202, 89.99848175, 91.0147934, 92.59336853, 92.43811798, 96.53754425,
	96.73680115, 96.45957184, 94.80505371, 99.06253052, 100.4033356,
	102.9054031, 106.7075958, 106.2871094, 107.901825, 108.9930801, 109.5210953,
	112.0943451, 112.2623367, 114.5079193, 117.4966278, 121.057106, 121.8650665,
	128.8690491, 124.0240707, 121.0974808, 122.135788, 125.4595108, 125.8089066,
	130.534729, 135.0151672, 134.6372986, 125.2548218, 127.7769394, 115.3744125,
	125.9631882, 130.4459991, 131.5825348, 137.4865875, 128.6188965,
	137.2123871, 139.6679688, 136.759201, 138.5576782, 142.1238861, 147.5072327,
	150.8257294, 151.5508423, 139.4282837, 119.4741821, 135.83638, 143.1665649,
	145.7930603, 154.8682098, 165.8714294, 159.3499603, 156.8845367,
	175.4017487, 182.8612671, 182.9909973, 188.7356415, 194.9709015, 205.473114,
	206.41008, 210.8867493, 215.2071075, 221.3588715, 210.8115997, 225.6193542,
	222.3242645, 229.9334412, 216.7743988, 211.3839264, 217.596344, 198.342865,
	197.8443298, 180.8363647, 198.5292358, 191.1271515, 172.7517395,
	187.5596161, 197.2551422, 184.8143158, 198.5655212, 193.7963715,
	198.2449951, 201.1881409, 202.0463257, 214.8217468, 223.5415039,
	219.2243652, 207.9371796, 203.1773987, 222.3072662, 233.0758057,
	236.6908264, 249.2323761, 256.4553223, 246.1771088, 257.8913269,
	264.8921509, 270.8598633, 276.6333923, 281.3833923, 280.1282959,
	298.8978882, 288.880127, 298.6000061, 292.9599915, 278.7399902,
];

const goldPrices = [
	494.6000061, 517.0999756, 517.0999756, 561.5999756, 581.7999878,
	651.7999878, 642.5, 613.5, 634.2000122, 625.9000244, 598.5999756,
	598.5999756, 646.9000244, 635.2000122, 652, 669.4000244, 663, 663, 661,
	648.0999756, 648.0999756, 673, 742.7999878, 792, 782.2000122, 834.9000244,
	922.7000122, 972.0999756, 916.2000122, 862.7999878, 887.2999878,
	887.2999878, 913.9000244, 829.2999878, 874.2000122, 716.7999878,
	816.2000122, 883.5999756, 927.2999878, 927.2999878, 927.2999878,
	890.7000122, 978.7999878, 927.0999756, 953.7000122, 951.7000122, 1008,
	1039.699951, 1039.699951, 1095.199951, 1083, 1118.300049, 1113.300049,
	1180.099976, 1212.199951, 1245.5, 1181.699951, 1181.699951, 1307.800049,
	1357.099976, 1385, 1421.099976, 1333.800049, 1409.300049, 1438.900024, 1556,
	1556, 1502.300049, 1628.300049, 1828.5, 1620.400024, 1724.199951, 1745.5,
	1565.800049, 1565.800049, 1709.900024, 1669.300049, 1669.300049,
	1562.599976, 1603.5, 1603.5, 1684.599976, 1771.099976, 1717.5, 1710.900024,
	1674.800049, 1660.599976, 1577.699951, 1594.800049, 1472.199951,
	1392.599976, 1223.800049, 1312.400024, 1396.099976, 1396.099976,
	1323.599976, 1250.599976, 1250.599976, 1240.099976, 1321.400024,
	1283.400024, 1295.599976, 1245.599976, 1245.599976, 1281.300049,
	1285.800049, 1210.5, 1171.099976, 1175.199951, 1183.900024, 1278.5, 1278.5,
	1278.5, 1182.400024, 1189.400024, 1171.5, 1094.900024, 1131.599976, 1115.5,
	1141.5, 1141.5, 1060.300049, 1116.400024, 1233.900024, 1234.199951,
	1289.199951, 1289.199951, 1318.400024, 1349, 1306.900024, 1313.300049,
	1271.5, 1170.800049, 1150, 1150, 1252.599976, 1247.300049, 1266.099976,
	1272, 1240.699951, 1266.599976, 1316.199951, 1281.5, 1281.5, 1273.199951,
	1306.300049, 1339, 1315.5, 1322.800049, 1322.800049, 1300.099976,
	1251.300049, 1251.300049, 1200.300049, 1191.5, 1212.300049, 1220.199951,
	1278.300049, 1319.699951, 1312.800049, 1293, 1282.800049, 1305.800049,
	1409.699951, 1426.099976, 1519.099976, 1519.099976, 1511.400024,
	1465.599976, 1465.599976, 1582.900024, 1564.099976, 1564.099976,
	1684.199951, 1736.900024, 1793, 1962.800049, 1967.599976, 1887.5,
	1877.400024, 1877.400024, 1893.099976, 1847.300049, 1728.099976,
	1713.800049, 1767.300049, 1902.5, 1770.800049, 1812.599976, 1812.599976,
	1755.300049, 1783, 1773.599976, 1827.5, 1795, 1899.400024, 1949.199951,
	1909.300049, 1909.300049, 1804.099976, 1762.900024, 1712.800049,
	1662.400024, 1635.900024, 1746, 1819.699951, 1819.699951, 1828.900024, 1969,
	1990.099976, 1963.900024, 1921.099976, 1970.5, 1938.199951, 1848.099976,
	1848.099976, 2038.099976, 2062.399902, 2048.399902, 2045.699951,
	2217.399902, 2291.399902, 2322.899902, 2327.699951, 2426.5, 2493.800049,
	2493.800049, 2738.300049, 2657, 2657, 2812.5, 2836.800049, 3040,
];

//
const btcPrices = [
	320.1929932, 217.4640045, 254.2630005, 244.223999, 236.1450043, 230.1900024,
	263.071991, 284.6499939, 230.0559998, 236.0599976, 314.1659851, 377.3210144,
	430.5669861, 368.7669983, 437.696991, 416.7290039, 448.3179932, 531.3859863,
	673.3369751, 624.6810303, 575.4719849, 609.7349854, 700.9719849, 745.690979,
	963.742981, 970.4030151, 1179.969971, 1071.790039, 1347.890015, 2286.409912,
	2480.840088, 2875.340088, 4703.390137, 4338.709961, 6468.399902,
	10233.59961, 14156.40039, 10221.09961, 10397.90039, 6973.529785,
	9240.549805, 7494.169922, 6404, 7780.439941, 7037.580078, 6625.560059,
	6317.609863, 4017.268555, 3742.700439, 3457.792725, 3854.7854, 4105.404297,
	5350.726563, 8574.501953, 10817.15527, 10085.62793, 9630.664063,
	8293.868164, 9199.584961, 7569.629883, 7193.599121, 9350.529297,
	8599.508789, 6438.644531, 8658.553711, 9461.058594, 9137.993164, 11323.4668,
	11680.82031, 10784.49121, 13780.99512, 19625.83594, 29001.7207, 33114.35938,
	45137.76953, 58918.83203, 57750.17578, 37332.85547, 35040.83594,
	41626.19531, 47166.6875, 43790.89453, 61318.95703, 57005.42578, 46306.44531,
	38483.125, 43193.23438, 45538.67578, 37714.875, 31792.31055, 19784.72656,
	23336.89648, 20049.76367, 19431.78906, 20495.77344, 17168.56641,
	16547.49609, 23139.2832, 23147.35352, 28478.48438, 29268.80664, 27219.6582,
	30477.25195, 29230.11133, 25931.47266, 26967.91602, 34667.78125,
	37712.74609, 42265.1875, 42582.60547, 61198.38281, 71333.64844, 60636.85547,
	67491.41406, 62678.29297, 64619.25, 58969.89844, 63329.5, 70215.1875,
	96449.05469, 93429.20313, 102405.0234, 84373.00781, 84167.19531,
];

function getByMonth(tick: number, prices: number[]) {
	return prices[tick];
}

function getByYear(tick: number, prices: number[]) {
	return prices[tick * 12];
}

function getByWeek(tick: number, prices: number[]) {
	const lowMonth = Math.floor(tick / 4);
	const low = prices[lowMonth];
	const high = prices[lowMonth + 1];
	const weekInMonth = tick % 4;

	return low + ((high - low) * weekInMonth) / 4;
}

function getBeforeAfter(tick: number, prices: number[], tickKind: TickKind) {
	let getter;
	if (tickKind == "week") {
		getter = getByWeek;
	} else if (tickKind == "month") {
		getter = getByMonth;
	} else getter = getByYear;

	return {
		before: getter(tick - 1, prices),
		after: getter(tick, prices),
	};
}

export function getPercent(tick: number, tickKind: TickKind, prices: number[]) {
	const { before, after } = getBeforeAfter(tick, prices, tickKind);

	const percentChange = ((after - before) / before) * 100;
	return percentChange;
}

export function getPrices(investment: string) {
	if (investment == "etf") return etfPrices;
	if (investment == "gold") return goldPrices;
	if (investment == "btc") return btcPrices;
	invariant(false, "No historical data for investment");
}
