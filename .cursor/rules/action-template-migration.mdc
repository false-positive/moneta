---
description: 
globs: 
alwaysApply: false
---
# Action Template Migration Guide

This document explains the migration from the old node-based action system to the new action template system.

## Old System (Node-based)

The old system is defined in [web/lib/engine/action-templates-tree.ts](mdc:web/lib/engine/action-templates-tree.ts) and uses a Node interface:

```typescript
interface Node {
    id: string;
    unlocked: boolean;
    icon: string;
    actionObject: Action;
    x: number;
    y: number;
}
```

## New System (Template-based)

The new system is defined in [web/lib/engine/actions/templates.ts](mdc:web/lib/engine/actions/templates.ts) and uses ActionTemplate types:

```typescript
type ActionTemplate = ConstantActionTemplate | CustomizableActionTemplate;

interface ActionTemplateBase {
    id: number;
    iconImageHref: string;
    hardcodedPosition: { x: number; y: number };
}

interface ConstantActionTemplate extends ActionTemplateBase {
    templateKind: "constant";
    action: Action;
    isUnlocked: (quest: Quest, actionTemplate: ConstantActionTemplate) => boolean;
}

interface CustomizableActionTemplate extends ActionTemplateBase {
    templateKind: "user-customizable";
    initialAction: InitialAction;
    isUnlocked: (quest: Quest, actionTemplate: CustomizableActionTemplate) => boolean;
    userInputSchema: z.ZodObject;
    apply: (initialAction: InitialAction, userInput: unknown) => Action;
}
```

## Migration Map

When migrating from old to new system:

1. Node properties map to template properties:
   - `id` → Auto-generated by `createActionTemplate`
   - `icon` → `iconImageHref`
   - `unlocked` → `isUnlocked` function
   - `actionObject` → `action` for constant templates
   - `x, y` → `hardcodedPosition: { x, y }`

2. All old nodes should be migrated as `ConstantActionTemplate`s with:
   - `templateKind: "constant"`
   - Static `isUnlocked` function returning the old `unlocked` value

3. The new system supports customizable actions through `CustomizableActionTemplate`, which wasn't possible in the old system.

## Important Notes

- The old system in `action-templates-tree.ts` should remain intact during migration
- Quest descriptions should use the new template system via `createActionTemplates([...])`
- Both systems will coexist until migration is complete
- The new system adds type safety and customization support
- Position values are now explicitly marked as "hardcoded" to indicate legacy positioning system

See [web/lib/engine/quests/descriptions/00-tutorial-quest-description.tsx](mdc:web/lib/engine/quests/descriptions/00-tutorial-quest-description.tsx) for a complete migration example.
