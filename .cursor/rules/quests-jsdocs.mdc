---
description: Type, Function and Symbol documentation of Quests module
globs: 
alwaysApply: false
---
# Quest Module Documentation

## Types

### QuestDescription

A description of a quest, predefined in the given levels.

```typescript
type QuestDescription = {
    personName: string;
    questLLMDescription: string;
    maxStepCount: number;
    initialStep: Step;
    tickKind: TickKind;
};
```

* **personName**: The name of the person that the quest is about.
  * @deprecated No longer makes sense in the project.

* **questLLMDescription**: A description of the quest for LLM context.

* **maxStepCount**: The maximum number of steps in the quest.
  When this number is reached, the quest is finished. Simulation cannot
  continue after this.

* **initialStep**: The initial step of the quest.
  It includes the initial values of all metrics, as well as the initial
  actions that are relevant before the user makes any decisions.

  The user can add actions to this step by making decisions immediately
  after the quest starts and before they advance to the next tick. They
  will be appended after any pre-defined new actions.

* **tickKind**: The kind of tick to use for the quest.

### Quest

The specific instance of a quest, specific to the user. It is based on an initial `QuestDescription`.

```typescript
type Quest = {
    description: QuestDescription;
    steps: Step[];
    currentStepIndex: number;
};
```

* **description**: The description of the quest, predefined by the application.
  This won't change during the quest and describes the baseline scenario.

* **steps**: The steps of the quest.
  These steps include the actions added as a result of the user's decisions.

* **currentStepIndex**: The index of the step, which the user is currently on.
  A user can select any existing step as the current one and if they add any actions, they will be added to the current step.
  Value will always be within the bounds of `QuestDescription.maxStepCount`.

## Functions

### getNewActionsPerStep

```typescript
function getNewActionsPerStep(quest: Quest): Action[][]
```

Distills a list of actions that were added in each step

This is used to take the guts out of the current simulation, throw it away and simulate it again with modified actions.

* **Parameters**:
  * `quest` - The quest to distill the actions from.
* **Returns**: A list of actions that were added in each step.

### simulateWithActions

```typescript
function simulateWithActions(
    questDescription: QuestDescription,
    newActionsPerStep: Action[][]
): Step[]
```

Simulates the quest with the given actions.

* **Parameters**:
  * `questDescription` - The description of the quest.
  * `newActionsPerStep` - A list of actions that were added in each step. Can be obtained from a previous quest simulation with `getNewActionsPerStep`.
* **Returns**: A list of new steps that were simulated.

### getLatestStep

```typescript
function getLatestStep(quest: Quest): Step
```

Get the step of the quest with the greatest tick value.

* **Parameters**:
  * `quest` - The quest to get the latest step from.
* **Returns**: The step with the greatest tick value.

### getActionDurations

```typescript
function getActionDurations(quest: Quest): { action: Action; startTick: number; endTick: number; }[]
```

Get the durations of all actions in the quest.

For each new action, it returns an object with the action, the tick on which it started and the tick on which it ended.

The `startTick` is the first tick, on which the action was added to the step (inclusive).
The `endTick` is the last tick, on which the action was relevant (inclusive).

Example:

If the action is added to the step on tick 2025 and it lasts for 3 ticks,
the returned object will have `startTick` 2025 and `endTick` 2027.

* **Parameters**:
  * `quest` - The quest to get the action durations from.
* **Returns**: A list of action durations.
