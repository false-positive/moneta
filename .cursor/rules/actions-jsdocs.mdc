---
description: Type, Function and Symbol documentation of Actions module
globs: 
alwaysApply: false
---
# Action Types and Simulation Engine Documentation

## Action Classification

A classification of actions, used for segregating actions in the UI. Non-exhaustive.

```typescript
export type ActionKind = "investment" | "income" | "expense" | "other";
```

## Time Units

A classification of the time unit in which the simulation is performed.
Not used in the simulation, but is used to determine the unit of measurement for the metrics in the UI.
Values for specific quest descriptions should be chosen such, to make sense for the tick kind.

```typescript
export type TickKind = "week" | "month" | "year";
```

## Step Definition

A discrete moment (year, month, week, etc.) in time, during which the state of the world is recorded.
The step includes the values of all metrics at the moment in time.

```typescript
export type Step = {
    tick: number;
    bankAccount: number;
    joy: number;
    freeTimeHours: number;
    newActions: Action[];
    oldActiveActions: Action[];
};
```

### Step Properties

#### tick
A tick is a blanket term for either the year/month/week in which the step occurs.
Tick can be thought of as the "time" of the step and contains numeric values like `2025`, `1` (1st week), etc.
Tick values are **unique** for the entire simulation of steps. Each subsequent step always has a tick value **one greater than the previous one**.
Only the first step's tick can be determined by the description, the rest are predictably generated by the engine by incrementing the tick of the previous step.

#### bankAccount
A metric, representing the amount of money in the bank account the user currently has.
This is in no specific currency. It's the money that user can immediately spend and does *NOT* include any other assets (e.g. stocks, real estate, etc.).
Other assets, such as investments, are stored in the corresponding `Action`.
Whenever an investment (etc.) action is finished, the corresponding money is added to the bank account metric value and the action is removed from the list of active actions.

#### joy
A metric, representing the amount of joy the user currently has.
This is a number between 0 and 100.

#### freeTimeHours
A metric, representing the amount of free time the user currently has in hours/tick.
Frontend may use the `TickKind` from the `QuestDescription` to determine the unit of measurement (e.g. hours per week, hours per month, etc.).

#### newActions
A list of actions that were started before the start of the current step, but after the end of the previous step.
The result of these actions is already apparent in the current step.

Note: They are applied after all pre-existing actions.

If any of these actions are still relevant after the current step, they will be added to the list of `oldActiveActions` with a decremented `remainingTicks`.

#### oldActiveActions
A list of actions that were started in any previous step, but are still relevant in the current step (and potentially in future steps).
The result of these actions is already apparent in the current step.

## Percentage Values

An encapsulation of a numeric percentage value.
It can either be a constant value, or a varying value that is looked up from an investment's price history each time when it needs to be evaluated.

```typescript
export type RepeatedPercent =
    | {
          source: "constant";
          percent: number;
      }
    | {
          source: "history";
          investmentKind: InvestmentKind;
      };
```

### Percentage Helper Functions

```typescript
export const constantPercent = (percent: number): RepeatedPercent => ({
    source: "constant",
    percent,
});
```

Creates a `RepeatedPercent` that is a constant value.
- @param percent - The percentage value (-100% to 100%).
- @returns A `RepeatedPercent` that is a constant value.

```typescript
export const historyPercent = (
    investmentKind: InvestmentKind
): RepeatedPercent => ({
    source: "history",
    investmentKind,
});
```

Creates a `RepeatedPercent` that is a varying value, looked up from an investment's price history each time when it needs to be evaluated.
- @param investmentKind - The kind of investment that the percentage value is looked up from.
- @returns A `RepeatedPercent` that is a varying value.

## Metric Impact

A general description of how a metric is affected by an action.
Each of its values can be configured to achieve simple and complex modifications of the metric's numeric value.

Application happens as follows:
newValue = (100 + repeatedPercent) / 100 * (previousValue + repeatedAbsoluteDelta)

```typescript
export type MetricImpact = {
    hasImpact: boolean;
    minRequired: number;
    maxRequired: number;
    repeatedAbsoluteDelta: number;
    repeatedPercent: RepeatedPercent;
    initialPrice: number;
    repeatedPrice: number;
};
```

### MetricImpact Properties

#### hasImpact
Whether or not this impact should be applied.
If `false`, none of the other values are considered and the metric is not affected.

#### minRequired
The minimum required value of the metric for the impact to be applied.
If the metric is less than this value, the impact is not applied.
@default -Infinity

#### maxRequired
The maximum required value of the metric for the impact to be applied.
If the metric is greater than this value, the impact is not applied.
@default Infinity

#### repeatedAbsoluteDelta
A constant value that is added to the metric every time.
@default 0

#### repeatedPercent
A percentage value that is added to the metric every time.
@default 0

## Action Definition

A description of an action that can be started by the user.

It is an instance of an action â€“ eg. if user invests twice, 2 distinct actions are created.

```typescript
export type Action = {
    name: string;
    kind: ActionKind;
    shortDescription: string;
    llmDescription: string;
    remainingTicks: number;
    bankAccountImpact: MetricImpact;
    investmentImpact: MetricImpact;
    joyImpact: MetricImpact;
    freeTimeImpact: MetricImpact;
    capital: number;
    canChangeInitialPrice?: boolean;
    canChangeRepeatedPrice?: boolean;
};
```

### Action Properties

#### remainingTicks
The number of ticks that the action will be applied.

If this action is currently being added, the value will be the duration in ticks that it will be relevant.
After it was applied, the number is decremented by 1 and represents how many more ticks it will be relevant for.

When the value reaches 0, the action is finished and the `capital` of the action (if any) is added to the bank account.

#### capital
The amount of money that the action will add to the bank account. Relevant only for actions that add money to the bank account (e.g. investments).

## Core Functions

```typescript
export function computeNextStep(
    previousStep: Step,
    newActions: Action[],
    tickKind: TickKind
)
```

Computes the next step in the simulation, given the previous step and the new actions to added.
- @param previousStep - The previous step in the simulation.
- @param newActions - The new actions to be applied in the next step.
- @param tickKind - The kind of tick to use for the next step.
- @returns The next step in the simulation.
