---
description: Documentation for XState Store - the minimal state management library
globs: 
alwaysApply: false
---
**Version 3.x**

XState Store is a small library for simple state management in JavaScript/TypeScript applications. It is meant for updating store data using **events** for vanilla JavaScript/TypeScript apps, React apps, and more. It is comparable to libraries like Zustand, Redux, and Pinia. It is NOT the same as XState and DOES NOT use state machines.

## Quick start

```ts
import { createStore } from '@xstate/store';

const store = createStore({
  // Initial context
  context: { count: 0, name: 'David' },
  // Transitions
  on: {
    inc: (context) => ({
      ...context,
      count: context.count + 1,
    }),
    add: (context, event: { num: number }) => ({
      ...context,
      count: context.count + event.num,
    }),
    changeName: (context, event: { newName: string }) => ({
      ...context,
      name: event.newName,
    }),
  },
});

// Get the current state (snapshot)
console.log(store.getSnapshot());
// => {
//   status: 'active',
//   context: { count: 0, name: 'David' }
// }

// Subscribe to snapshot changes
store.subscribe((snapshot) => {
  console.log(snapshot.context);
});

// Send an event (traditional way)
store.send({ type: 'inc' });
// logs { count: 1, name: 'David' }

// Send an event using the fluent trigger API
store.trigger.add({ num: 10 });
// logs { count: 11, name: 'David' }

store.trigger.changeName({ newName: 'Jenny' });
// logs { count: 11, name: 'Jenny' }
```

## Creating a store

To create a store, pass a configuration object to the `createStore(â€¦)` function with:

1. The initial `context`
2. An `on` object for transitions where the keys are event types and the values are context update functions

When updating context in transitions, you must return the complete context object with all properties:

```ts
import { createStore } from '@xstate/store';

const store = createStore({
  context: { count: 0, name: 'David' },
  on: {
    // highlight-start
    inc: (context) => ({
      ...context, // Preserve other context properties
      count: context.count + 1,
    }),
    // highlight-end
  },
});
```

## Effects and Side Effects

You can enqueue effects in state transitions using the `enqueue` argument:

```ts
import { createStore } from '@xstate/store';

const store = createStore({
  context: { count: 0 },
  on: {
    // highlight-start
    incrementDelayed: (context, event, enqueue) => {
      enqueue.effect(async () => {
        await new Promise((resolve) => setTimeout(resolve, 1000));
        store.send({ type: 'increment' });
      });

      return context;
    },
    // highlight-end
    increment: (context) => ({
      ...context,
      count: context.count + 1,
    }),
  },
});
```

## Emitting Events

You can emit events from transitions by defining them in the `emits` property and using `enqueue.emit`:

```ts
import { createStore } from '@xstate/store';

const store = createStore({
  context: { count: 0 },
  // highlight-start
  emits: {
    increased: (payload: { by: number }) => {
      // Optional side effects can go here
    },
  },
  // highlight-end
  on: {
    inc: (context, event: { by: number }, enqueue) => {
      // highlight-start
      enqueue.emit.increased({ by: event.by });
      // highlight-end

      return {
        ...context,
        count: context.count + event.by,
      };
    },
  },
});

// Listen for emitted events
store.on('increased', (event) => {
  console.log(`Count increased by ${event.by}`);
});
```

## Pure transitions

You can use `store.transition(state, event)` to compute a tuple of the next state and any effects from a given state and event. This is useful for debugging and testing, or for having full control over the state transitions in your application.

```ts
const store = createStore({
  context: { count: 0 },
  emits: {
    incremented: (payload: { by: number }) => {},
  },
  on: {
    inc: (context, event: { by: number }, enqueue) => {
      enqueue.emit.incremented({ by: event.by });

      enqueue.effect(async () => {
        await new Promise((resolve) => setTimeout(resolve, 1000));
        store.send({ type: 'increment' });
      });

      return {
        ...context,
        count: context.count + event.by,
      };
    },
  },
});

const snapshot = store.getSnapshot();

// highlight-start
const [nextState, effects] = store.transition(snapshot, {
  type: 'inc',
  by: 1,
});
// highlight-end

console.log(nextState.context);
// => { count: 1 }

console.log(effects);
// => [
//   { type: 'incremented', by: 1 },
//   Function
// ]

// The store's state is unchanged
console.log(store.getSnapshot().context);
// => { count: 0 }
```

If you need to determine the next state from the store's initial state, you can get the initial snapshot using `store.getInitialSnapshot()`:

```ts
const initialSnapshot = store.getInitialSnapshot();

const [nextState, effects] = store.transition(initialSnapshot, {
  type: 'inc',
  by: 1,
});
```

## Selectors

Store selectors provide an efficient way to select and subscribe to specific parts of your store's state. With store selectors, you can:

- Get the current value of a specific part of state via `selector.get()`
- Subscribe to changes of only that specific part via `selector.subscribe(observer)`
- Optimize performance by only notifying subscribers when the selected value actually changes via `selector.subscribe(observer, equalityFn)`

You can create a selector using `store.select(selector)`:

```ts
import { createStore } from '@xstate/store';

const store = createStore({
  context: {
    position: { x: 0, y: 0 },
    name: 'John',
    age: 30,
  },
  on: {
    positionUpdated: (
      context,
      event: { position: { x: number; y: number } },
    ) => ({
      ...context,
      position: event.position,
    }),
  },
});

// Create a selector for the position
const position = store.select((state) => state.context.position);

// Get current value
console.log(position.get()); // { x: 0, y: 0 }

// Subscribe to changes
position.subscribe((position) => {
  console.log('Position updated:', position);
});

// When position updates, only position subscribers are notified
store.trigger.positionUpdated({ position: { x: 100, y: 200 } });
// Logs: Position updated: { x: 100, y: 200 }
```

### Custom Equality Functions

You can provide a custom equality function as the second argument to `store.select(selector, equalityFn)` to control when subscribers should be notified:

```ts
const position = store.select(
  (state) => state.context.position,
  // Only notify if x coordinate changes
  (prev, next) => prev.x === next.x,
);
```

XState Store also provides a `shallowEqual` function that can be used as a default equality function:

```ts
import { shallowEqual } from '@xstate/store';

const position = store.select((state) => state.context.position, shallowEqual);
```

## Atoms

An atom is a lightweight, reactive piece of state that can be read, written to, and subscribed to. Atoms can be used standalone or combined with other atoms and stores for more complex state management.

You can:

- Create an atom with `createAtom(initialValue)`
- Read the atom's value with `atom.get()`
- Subscribe to changes with `atom.subscribe(observer)`
- Update the atom with `atom.set(value)`

:::info
Atoms are best used for:

- Simple, independent pieces of state
- Derived/computed values
- Bridging between stores and external state
- When you need direct value updates without constraints

For state that needs to follow specific transition rules or complex update logic, consider using a store instead.
:::

### Creating Atoms

Create an atom using `createAtom()` with an initial value:

```ts
import { createAtom } from '@xstate/store';

// Create an atom with a primitive value
const countAtom = createAtom(0);

// Create an atom with an object
const userAtom = createAtom({ name: 'David', age: 30 });
```

### Reading and Writing Atoms

You can read an atom's value using `atom.get()` and update it using `atom.set()`:

```ts
const countAtom = createAtom(0);

// Read the current value
console.log(countAtom.get()); // 0

// Set a new value directly
countAtom.set(1); // 1

// Update value using a function
countAtom.set((prev) => prev + 1); // 2
```

### Subscribing to Changes

Atoms support subscriptions to react to value changes:

```ts
const countAtom = createAtom(0);

// Subscribe to changes
const subscription = countAtom.subscribe((newValue) => {
  console.log('Count changed:', newValue);
});

countAtom.set(1); // Logs: "Count changed: 1"

// Unsubscribe when done
subscription.unsubscribe();

countAtom.set(2); // Does not log anything
```

### Combined Atoms

You can create derived atoms that combine values from other atoms, stores, or selectors:

```ts
const nameAtom = createAtom('David');
const ageAtom = createAtom(30);

// Combine multiple atoms
const userAtom = createAtom((read) => ({
  name: read(nameAtom),
  age: read(ageAtom),
}));

// Combined atoms are read-only and update automatically
console.log(userAtom.get()); // { name: 'David', age: 30 }
nameAtom.set('John');
console.log(userAtom.get()); // { name: 'John', age: 30 }
ageAtom.set(31);
console.log(userAtom.get()); // { name: 'John', age: 31 }
```

### Working with Stores and Selectors

Atoms can seamlessly integrate with XState stores and selectors:

```ts
const store = createStore({
  context: { count: 0 },
  on: {
    increment: (context) => ({ ...context, count: context.count + 1 }),
  },
});

// Create an atom from a store selector
const countSelector = store.select((state) => state.context.count);
const doubleCountAtom = createAtom((read) => 2 * read(countSelector));

console.log(doubleCountAtom.get()); // 0
store.trigger.increment();
console.log(doubleCountAtom.get()); // 2
```

:::tip
Combined atoms are read-only by design. If you need to update multiple values atomically, consider using a store instead.
:::

## Inspection

Just like with XState, you can use the [Inspect API](mdc:inspection.mdx) to inspect events sent to the store and state transitions within the store by using the .inspect method:

```ts
import { createStore } from '@xstate/store';

const store = createStore({
  // ...
});

// highlight-start
store.inspect((inspectionEvent) => {
  // type: '@xstate.snapshot' or
  // type: '@xstate.event'
  console.log(inspectionEvent);
});
// highlight-end
```

:::info

Since the store is automatically started, inspectors will immediately receive the initial state snapshot.

:::

The `.inspect(â€¦)` method returns a subscription object:

```ts
import { createStore } from '@xstate/store';

const sub = store.inspect((inspectionEvent) => {
  console.log(inspectionEvent);
});

// Stop listening for inspection events
sub.unsubscribe();
```

You can use the [Stately Inspector](mdc:inspector.mdx) to inspect and visualize the state of the store.

```ts
import { createBrowserInspector } from '@statelyai/inspect';
import { createStore } from '@xstate/store';

const store = createStore({
  // ...
});

const inspector = createBrowserInspector({
  // ...
});

store.inspect(inspector);
```

## Usage with React

If you are using React, you can use the `useSelector(store, selector)` hook to subscribe to the store and get the current state.

```tsx
import { createStore } from '@xstate/store';
import { useSelector } from '@xstate/store/react';

// Create a store
const store = createStore({
  context: { count: 0, name: 'David' },
  on: {
    inc: (context) => ({
      ...context,
      count: context.count + 1,
    }),
  },
});

// Use the `useSelector` hook to subscribe to the store
function Component(props) {
  const count = useSelector(store, (state) => state.context.count);

  // This component displays the count and has a button to increment it
  return (
    <div>
      <button onClick={() => store.trigger.inc()}>Increment</button>
    </div>
  );
}
```

A store can be shared with multiple components, which will all receive the same snapshot from the store instance. Stores are useful for global state management.

### Listening to Emitted Events

You can listen to events emitted by the local store via `useEffect(â€¦)`:

```tsx
function Counter({
  initialCount = 0,
  onIncreased,
}: {
  initialCount?: number;
  onIncreased?: (by: number) => void;
}) {
  const store = useStore({
    // ... store config
  });

  // Listen to emitted events
  useEffect(() => {
    const subscription = store.on('increased', ({ by }) => {
      onIncreased?.(by);
    });

    return subscription.unsubscribe;
  }, [store, onIncreased]);

  // ... rest of component
}
```

### Initializing with Props

Local stores can be initialized using component props, making them more reusable:

```tsx
function Counter({ initialCount = 0, step = 1 }) {
  const store = useStore({
    context: {
      count: initialCount,
      step,
    },
    on: {
      increment: (context) => ({
        ...context,
        count: context.count + context.step,
      }),
    },
  });

  // ... rest of component
}
```

### Props and Store State

Similar to `useState` and `useReducer`, changes to props after the initial render will not automatically update the store's state. The store's state can only be updated by sending events:

```tsx
function Counter({ currentCount = 0 }) {
  const store = useStore({
    context: {
      // currentCount is only used once during initialization
      count: currentCount,
    },
    on: {
      countUpdated: (context, event: { value: number }) => ({
        ...context,
        count: event.value,
      }),
    },
  });

  // If you need to update the store when props change,
  // you'll need to send an event explicitly:
  useEffect(() => {
    store.trigger.countUpdated({ value: currentCount });
  }, [store, currentCount]);

  // ... rest of component
}
```

This behavior ensures that state updates are always explicit and traceable through events, maintaining a predictable data flow in your application.

:::tip
If you need to synchronize store state with prop changes, consider whether the value should be stored in the store at all. Sometimes it's simpler to use the prop directly in your component and compute derived values outside of the store.
:::